name: Infrastructure CI

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'data/**'
      - '.github/workflows/infra.yml'
  pull_request:
    paths:
      - 'terraform/**'
      - 'data/**'
      - '.github/workflows/infra.yml'
  workflow_dispatch:

jobs:
  # Fast, always-safe checks (no cloud calls)
  validate:
    name: Terraform fmt & validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform fmt (check)
        run: terraform fmt -check -recursive

      # Use -backend=false so we don't touch any remote backends
      - name: Terraform init (no backend)
        run: terraform init -backend=false

      - name: Terraform validate
        run: terraform validate

  # Optional: dry-run plans for dev/prod using OIDC → AWS (only runs if role is configured)
  plan:
    name: Terraform plan (dev & prod)
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ vars.AWS_ROLE_TO_ASSUME != '' }}   # Only run if you set this repo/org variable
    permissions:
      id-token: write   # Required for GitHub OIDC → AWS
      contents: read
    env:
      AWS_REGION: us-east-1
    strategy:
      matrix:
        tfvars:
          - ../data/dev.tfvars.json
          - ../data/prod.tfvars.json
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform init
        run: terraform init

      - name: Terraform plan (${{ matrix.tfvars }})
        run: terraform plan -var-file=${{ matrix.tfvars }} -input=false -no-color
